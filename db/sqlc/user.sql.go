// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUsers = `-- name: CreateUsers :one
INSERT INTO users (
    username,
    hash_password,
    full_name,
    email,
    password_changed_at
) VALUES (
             $1, $2 , $3, $4, $5
         )
RETURNING username, hash_password, full_name, email, password_changed_at, created_at
`

type CreateUsersParams struct {
	Username          string    `json:"username"`
	HashPassword      string    `json:"hash_password"`
	FullName          string    `json:"full_name"`
	Email             string    `json:"email"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUsers,
		arg.Username,
		arg.HashPassword,
		arg.FullName,
		arg.Email,
		arg.PasswordChangedAt,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUsers(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUsers, username)
	return err
}

const getUsers = `-- name: GetUsers :one
SELECT username, hash_password, full_name, email, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUsers(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsers, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersForUpdate = `-- name: GetUsersForUpdate :one
SELECT username, hash_password, full_name, email, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUsersForUpdate(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsersForUpdate, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, hash_password, full_name, email, password_changed_at, created_at FROM users
ORDER BY username
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.HashPassword,
			&i.FullName,
			&i.Email,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUsersName = `-- name: UpdateUsersName :one
UPDATE users
set full_name = $2
WHERE username = $1
RETURNING username, hash_password, full_name, email, password_changed_at, created_at
`

type UpdateUsersNameParams struct {
	Username string `json:"username"`
	FullName string `json:"full_name"`
}

func (q *Queries) UpdateUsersName(ctx context.Context, arg UpdateUsersNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsersName, arg.Username, arg.FullName)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUsersPassword = `-- name: UpdateUsersPassword :one
UPDATE users
set hash_password = $2 ,
    password_changed_at=$1
WHERE username = $1
RETURNING username, hash_password, full_name, email, password_changed_at, created_at
`

type UpdateUsersPasswordParams struct {
	PasswordChangedAt time.Time `json:"password_changed_at"`
	HashPassword      string    `json:"hash_password"`
}

func (q *Queries) UpdateUsersPassword(ctx context.Context, arg UpdateUsersPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsersPassword, arg.PasswordChangedAt, arg.HashPassword)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
